//Krish Sareen and Jonathan Venegas
#include <msp430.h>
#include <string.h>

//uart
unsigned char UCA0_UART_RX_data(void);
void UCA0_UART_TX_data(unsigned char);
volatile unsigned char ch;  // byte variable
volatile unsigned char mem;  // byte variable

unsigned int adc_raw[3]; //array
unsigned int x, y, z;
unsigned int x1, y1, z1;
unsigned char cbuff;
unsigned int p = 2000;

int main(void) {
    WDTCTL = WDTPW | WDTHOLD;   // hold the watchdog timer
    PM5CTL0 &= ~LOCKLPM5;  // clear LOCKLPM5 bit
    P1DIR |= BIT0|BIT1; // output direction, P1.0
    P1SEL1 &= ~BIT0; //alternate function (TA0.1)
    P1SEL0 |= BIT0; //alternate function (TA0.1)
    UCA0CTLW0 = UCSWRST; // eUSCI reset state
    UCA0CTLW0 |= UCSSEL_2;  // eUSCI clock source: SMCLK
    UCA0BRW = 6; // BRx
    UCA0MCTLW = UCOS16 | (8 << 4) | (32 << 8);  // UCOS16, BRF, BRSx
    P2SEL1 |= BIT0 | BIT1; // UART function (P2.0, P2.1)
    P2SEL0 &= ~(BIT0 | BIT1); // UART function (P2.0, P2.1)
    UCA0CTLW0 &= ~UCSWRST; // eUSCI operation state

    //servo motor config
    TA0CTL = TASSEL_2 | MC_1 | TACLR;
    TA0CCR0 = 20000; //20 ms
    TA0CCR1 = 1500; //1.5 ms can be changed
//1000 for 45 clockwise
//2000 for 45 counterclockwise
//can be coded to remember TA0CCR1 until next button press
    TA0CCTL1 = OUTMOD_7;

    //ADC config
    ADC12CTL0 = ADC12SHT0_6 | ADC12MSC | ADC12ON; //ADC CTL0 turn on
    ADC12CTL1 = ADC12SHP | ADC12CONSEQ_1; //ADC CTL1 set up sequence
    ADC12CTL2 = ADC12RES_2; //12-bit conversion
    ADC12MCTL0 = ADC12INCH_9; //channel 1, x-axis
    ADC12MCTL1 = ADC12INCH_10; //channel 2, y-axis
    ADC12MCTL2 = ADC12INCH_11 | ADC12EOS; //channel 3, z-axis and end of sequence

    //Piezzo-Buzzer on port 8.0
    P8DIR = 0x01;
    P8OUT = 0x00;

    TA1CCR0 = 0; //change freq later
    TA1CTL = TASSEL_2|MC_1|TACLR;
    if((TA1CCTL0 & CCIFG)!=0) {
        P8OUT ^= BIT0;
        TA1CCTL0 &= ~CCIFG;
    }

    __delay_cycles(2000); // delay

    //ADC
    P3DIR |= 0xFF;
    P3OUT &= ~0xFF;

    //switches 1 and 2
//    P5DIR = 0x00;
//    P5REN = 0x60;
//    P5IN = 0x60;
    P5DIR = 0x00;
    P5REN = 0xFF;
    P5IN = 0xFF;

    //servo
    TA0CTL = TASSEL_2 | MC_1 |TACLR; //TA0CTL setup
    TA0CCR0 = 20000;
    TA0CCR1 = 1400;
    TA0CCTL1 = OUTMOD_7;


    __delay_cycles(2000); // delay

    while(1){

        ch = UCA0_UART_RX_data();  // receive a character
        if (P5IN == 0xBF | P5IN == 0xDF) {
            ch = '0';
        }


        P1OUT ^= BIT0;  // toggle (P1.0)
        __delay_cycles(200000);  // delay


        //active low pins, this is 0010 0000 (switch 1)
        if(P5IN == 0xBF) {
//            ch = '0';
//            mem = '1';
            UCA0_UART_TX_data('S');
            UCA0_UART_TX_data('1');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');
            P1OUT = 0x01;
            int i = 0;
            for (i = 0; i < 6500; i++) { //short interval
                TA1CCR0 = p;
                if((TA1CCTL0 & CCIFG)!=0) {
                    P8OUT ^= BIT0;
                    TA1CCTL0 &= ~CCIFG;
                }
            }

            p-= 100; //increase frequency
            if (p < 100) {
                p = 2000;
            }
            TA1CCR0 = 0;

        }

        //active low pins, this is 0100 0000 (switch 2)
        else if(P5IN == 0xDF) {
//            ch = '0';
//            mem = '1';
            UCA0_UART_TX_data('S');
            UCA0_UART_TX_data('2');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');
            int i = 0;
            for (i = 0; i < 28000; i++) {//longer interval
                TA1CCR0 = 1911; //C is 1911
                if((TA1CCTL0 & CCIFG)!=0) {
                    P8OUT ^= BIT0;
                    TA1CCTL0 &= ~CCIFG;
                }
            }
            for (i = 0; i < 28000; i++) {//longer interval
                TA1CCR0 = 1703; //D is 1703
                if((TA1CCTL0 & CCIFG)!=0) {
                    P8OUT ^= BIT0;
                    TA1CCTL0 &= ~CCIFG;
                }
            }
            for (i = 0; i < 28000; i++) {//longer interval
                TA1CCR0 = 1517; //E is 1517
                if((TA1CCTL0 & CCIFG)!=0) {
                    P8OUT ^= BIT0;
                    TA1CCTL0 &= ~CCIFG;
                }
            }
            TA1CCR0 = 0; //reset, unsure if this is needed
        }


        else if(ch == '1') {
            UCA0_UART_TX_data(ch);  // send a character
//            ch = '0';
//            mem = '0';
            UCA0_UART_TX_data('.');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('O');
            UCA0_UART_TX_data('p');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('r');
            UCA0_UART_TX_data('a');
            UCA0_UART_TX_data('t');
            UCA0_UART_TX_data('i');
            UCA0_UART_TX_data('o');
            UCA0_UART_TX_data('n');
            UCA0_UART_TX_data('s');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('l');
            UCA0_UART_TX_data('i');
            UCA0_UART_TX_data('s');
            UCA0_UART_TX_data('t');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');

            UCA0_UART_TX_data('2');
            UCA0_UART_TX_data('.');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('N');
            UCA0_UART_TX_data('a');
            UCA0_UART_TX_data('m');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');

            UCA0_UART_TX_data('3');
            UCA0_UART_TX_data('.');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('C');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('n');
            UCA0_UART_TX_data('t');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('r');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');

            UCA0_UART_TX_data('4');
            UCA0_UART_TX_data('.');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('L');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('f');
            UCA0_UART_TX_data('t');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');

            UCA0_UART_TX_data('5');
            UCA0_UART_TX_data('.');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('R');
            UCA0_UART_TX_data('i');
            UCA0_UART_TX_data('g');
            UCA0_UART_TX_data('h');
            UCA0_UART_TX_data('t');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');

            UCA0_UART_TX_data('6');
            UCA0_UART_TX_data('.');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('A');
            UCA0_UART_TX_data('c');
            UCA0_UART_TX_data('c');
            UCA0_UART_TX_data('.');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');
        }
        else if (ch == '2') {
            UCA0_UART_TX_data(ch);  // send a character
//            ch = '0';
//            mem = '0';
            UCA0_UART_TX_data(':');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('K');
            UCA0_UART_TX_data('r');
            UCA0_UART_TX_data('i');
            UCA0_UART_TX_data('s');
            UCA0_UART_TX_data('h');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('S');
            UCA0_UART_TX_data('a');
            UCA0_UART_TX_data('r');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('n');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('&');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('J');
            UCA0_UART_TX_data('o');
            UCA0_UART_TX_data('n');
            UCA0_UART_TX_data('a');
            UCA0_UART_TX_data('t');
            UCA0_UART_TX_data('h');
            UCA0_UART_TX_data('a');
            UCA0_UART_TX_data('n');
            UCA0_UART_TX_data(' ');
            UCA0_UART_TX_data('V');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('n');
            UCA0_UART_TX_data('e');
            UCA0_UART_TX_data('g');
            UCA0_UART_TX_data('a');
            UCA0_UART_TX_data('s');
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');
        }

        //Center servo motor
        else if(ch == '3') {
            UCA0_UART_TX_data(ch);  // send a character
//            ch = '0';
//            mem = '0';
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');
            TA0CCR1 = 1400;
            P1OUT ^=BIT1;
            //__delay_cycles(250000);
        }

        //Turn left
        else if(ch == '4') {
            UCA0_UART_TX_data(ch);  // send a character
//            ch = '0';
//            mem = '0';
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');
            TA0CCR1 = 1900;
            P1OUT ^=BIT1;
        }

        //turn right
        else if(ch == '5') {
            UCA0_UART_TX_data(ch);  // send a character
//            ch = '0';
//            mem = '0';
            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');
            TA0CCR1 = 1000;
            P1OUT ^=BIT1;
        }

        else if(ch == '6') {
            UCA0_UART_TX_data(ch);  // send a character
//            ch = '0';
//            mem = '0';
            ADC12CTL0 |= ADC12ENC | ADC12SC;
            while ((ADC12IFGR0 & BIT2)==0); //check flags

            adc_raw[0] = ADC12MEM0;
            adc_raw[1] = ADC12MEM1;
            adc_raw[2] = ADC12MEM2;
            __delay_cycles(40000);
            //P1OUT ^= 0x01; //toggle P1.0


            //convert channels to axes
            x = adc_raw[0];
            y = adc_raw[1];
            z = adc_raw[2];

            UCA0_UART_TX_data(':'); // x axis
            UCA0_UART_TX_data(' ');

            x1 = x / 1000;
            cbuff = '0' + x1 % 10;
            UCA0_UART_TX_data(cbuff);

            x1 = x / 100;
            cbuff = '0' + x1 % 10;
            UCA0_UART_TX_data(cbuff);

            x1 = x / 10;
            cbuff = '0' + x1 % 10;
            UCA0_UART_TX_data(cbuff);

            cbuff = '0' + x % 10;
            UCA0_UART_TX_data(cbuff);

            UCA0_UART_TX_data(','); // y axis
            UCA0_UART_TX_data(' ');
            y1 = y / 1000;
            cbuff = '0' + y1 % 10;
            UCA0_UART_TX_data(cbuff);

            y1 = y / 100;
            cbuff = '0' + y1 % 10;
            UCA0_UART_TX_data(cbuff);

            y1 = y / 10;
            cbuff = '0' + y1 % 10;
            UCA0_UART_TX_data(cbuff);

            cbuff = '0' + y % 10;
            UCA0_UART_TX_data(cbuff);

            UCA0_UART_TX_data(','); // z axis
            UCA0_UART_TX_data(' ');
            z1 = z / 1000;
            cbuff = '0' + z1 % 10;
            UCA0_UART_TX_data(cbuff);

            z1 = z / 100;
            cbuff = '0' + z1 % 10;
            UCA0_UART_TX_data(cbuff);

            z1 = z / 10;
            cbuff = '0' + z1 % 10;
            UCA0_UART_TX_data(cbuff);

            cbuff = '0' + z % 10;
            UCA0_UART_TX_data(cbuff);

            UCA0_UART_TX_data('\n');
            UCA0_UART_TX_data('\r');

            __delay_cycles(5000);
        }


    }
    return 0;
}
unsigned char UCA0_UART_RX_data(void){
    volatile unsigned char data;
    // wait until UCA0RXIFG is set
    while ((UCA0IFG & UCRXIFG)==0){
        if (P5IN == 0xBF || P5IN == 0xDF) {//interrupt if switch pressed
            break;
        }
    }
    data = UCA0RXBUF;  // read UCA0RXBUF
    UCA0IFG &= ~UCRXIFG;  // clear UCA0RXIFG flag
    return data;
}

void UCA0_UART_TX_data(unsigned char data){
    UCA0IFG &= ~UCTXIFG;  // clear UC0TXIFG flag
    UCA0TXBUF = data;  // store ‘T’ in TXBUF
    while ((UCA0IFG & UCTXIFG)==0);  // wait until UCA0TXIFG is set
}
